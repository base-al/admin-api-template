basePath: /api
consumes:
- application/json
definitions:
  authentication.AuthResponse:
    properties:
      accessToken:
        type: string
      avatar_url:
        type: string
      email:
        type: string
      exp:
        type: integer
      extend: {}
      first_name:
        type: string
      id:
        type: integer
      last_login:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      role_name:
        type: string
      username:
        type: string
    type: object
  authentication.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  authentication.ForgotPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  authentication.LoginRequest:
    description: Login request payload
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  authentication.RegisterRequest:
    description: Registration request payload
    properties:
      email:
        description: '@Description User''s email address'
        example: john@example.com
        type: string
      first_name:
        description: '@Description User''s first name'
        example: John
        type: string
      last_name:
        description: '@Description User''s last name'
        example: Doe
        type: string
      password:
        description: '@Description Password for the account (minimum 8 characters)'
        example: password123
        minLength: 8
        type: string
      phone:
        description: '@Description User''s phone number'
        example: "+1234567890"
        type: string
      username:
        description: '@Description Username for the account'
        example: johndoe
        type: string
    required:
    - email
    - password
    type: object
  authentication.ResetPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
      new_password:
        example: newpassword123
        minLength: 6
        type: string
      token:
        type: string
    required:
    - email
    - new_password
    - token
    type: object
  authentication.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  authorization.Permission:
    properties:
      action:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      resource_type:
        type: string
      updated_at:
        type: string
    type: object
  authorization.ResourcePermission:
    properties:
      action:
        description: Action type (e.g., "create", "read", "update", "delete")
        type: string
      created_at:
        type: string
      default_scope:
        description: Default permission scope (e.g., "own", "team", "all")
        type: string
      id:
        type: integer
      permission_id:
        description: 'Optional: legacy permission Id'
        type: integer
      resource_id:
        description: 'Optional: specific resource Id if applicable'
        type: string
      resource_type:
        description: Resource type (e.g., "project", "employee", etc.)
        type: string
      role_id:
        description: 'Optional: role Id for role-based permissions'
        type: string
      updated_at:
        type: string
      user_id:
        description: 'Optional: specific user Id if applicable'
        type: integer
    type: object
  authorization.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_system:
        type: boolean
      name:
        type: string
      permission_count:
        description: New field
        type: integer
      updated_at:
        type: string
    type: object
  employees.ChangePasswordRequest:
    properties:
      CurrentPassword:
        type: string
      NewPassword:
        type: string
    required:
    - CurrentPassword
    - NewPassword
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  media.MediaListResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      file:
        $ref: '#/definitions/storage.Attachment'
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  media.MediaResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      file:
        $ref: '#/definitions/storage.Attachment'
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.ActivityResponse:
    properties:
      action:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      entity_id:
        type: integer
      entity_type:
        type: string
      id:
        type: integer
      ip_address:
        type: string
      metadata:
        items:
          type: integer
        type: array
      updated_at:
        type: string
      user:
        $ref: '#/definitions/profile.UserModelResponse'
      user_agent:
        type: string
      user_id:
        type: integer
    type: object
  models.ActivitySelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.CreateActivityRequest:
    properties:
      action:
        type: string
      description:
        type: string
      entity_id:
        type: integer
      entity_type:
        type: string
      ip_address:
        type: string
      metadata:
        items:
          type: integer
        type: array
      user_agent:
        type: string
      user_id:
        type: integer
    type: object
  models.CreateEmployeeRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      username:
        type: string
    type: object
  models.CreateNotificationRequest:
    properties:
      action_url:
        type: string
      body:
        type: string
      read:
        type: boolean
      read_at:
        type: string
      title:
        type: string
      type:
        type: string
      user_id:
        type: integer
    type: object
  models.CreateSettingsRequest:
    properties:
      description:
        type: string
      group:
        type: string
      is_public:
        type: boolean
      label:
        type: string
      setting_key:
        type: string
      type:
        type: string
      value_bool:
        type: boolean
      value_float:
        type: number
      value_int:
        type: integer
      value_string:
        type: string
    type: object
  models.EmployeeResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/authorization.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.EmployeeSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.NotificationResponse:
    properties:
      action_url:
        type: string
      body:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      read:
        type: boolean
      read_at:
        $ref: '#/definitions/types.DateTime'
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.NotificationSelectOption:
    properties:
      id:
        type: integer
      name:
        description: From Title field
        type: string
    type: object
  models.SearchResponse:
    properties:
      duration:
        description: Search duration
        type: string
      modules:
        description: Modules that were searched
        items:
          type: string
        type: array
      query:
        description: Original search query
        type: string
      results:
        additionalProperties:
          items:
            $ref: '#/definitions/models.SearchResult'
          type: array
        description: Results grouped by module
        type: object
      total:
        description: Total results across all modules
        type: integer
    type: object
  models.SearchResult:
    properties:
      description:
        type: string
      id:
        type: integer
      metadata: {}
      subtitle:
        type: string
      title:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  models.SettingsResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      group:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      label:
        type: string
      setting_key:
        type: string
      type:
        type: string
      updated_at:
        type: string
      value_bool:
        type: boolean
      value_float:
        type: number
      value_int:
        type: integer
      value_string:
        type: string
    type: object
  models.SettingsSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.UpdateActivityRequest:
    properties:
      action:
        type: string
      description:
        type: string
      entity_id:
        type: integer
      entity_type:
        type: string
      ip_address:
        type: string
      metadata:
        items:
          type: integer
        type: array
      user_agent:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdateEmployeeRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      username:
        type: string
    type: object
  models.UpdateNotificationRequest:
    properties:
      action_url:
        type: string
      body:
        type: string
      read:
        type: boolean
      read_at:
        type: string
      title:
        type: string
      type:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdateSettingsRequest:
    properties:
      description:
        type: string
      group:
        type: string
      is_public:
        type: boolean
      label:
        type: string
      setting_key:
        type: string
      type:
        type: string
      value_bool:
        type: boolean
      value_float:
        type: number
      value_int:
        type: integer
      value_string:
        type: string
    type: object
  oauth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  profile.UpdatePasswordRequest:
    properties:
      NewPassword:
        maxLength: 255
        minLength: 6
        type: string
      OldPassword:
        maxLength: 255
        type: string
    required:
    - NewPassword
    - OldPassword
    type: object
  profile.UpdateRequest:
    properties:
      email:
        maxLength: 255
        type: string
      first_name:
        maxLength: 255
        type: string
      last_name:
        maxLength: 255
        type: string
      phone:
        maxLength: 255
        type: string
      username:
        maxLength: 255
        type: string
    type: object
  profile.User:
    properties:
      avatar:
        $ref: '#/definitions/storage.Attachment'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastLogin:
        type: string
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/authorization.Role'
      roleId:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
    type: object
  profile.UserModelResponse:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      username:
        type: string
    type: object
  profile.UserResponse:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_login:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      role_name:
        type: string
      username:
        type: string
    type: object
  storage.Attachment:
    properties:
      created_at:
        type: string
      field:
        type: string
      filename:
        type: string
      id:
        type: integer
      model_id:
        type: integer
      model_type:
        type: string
      path:
        type: string
      size:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  translation.BulkTranslationRequest:
    properties:
      language:
        type: string
      model:
        type: string
      model_id:
        type: integer
      translations:
        additionalProperties:
          type: string
        description: key -> value mapping
        type: object
    required:
    - language
    - model
    - model_id
    - translations
    type: object
  translation.CreateTranslationRequest:
    properties:
      key:
        type: string
      language:
        type: string
      model:
        type: string
      model_id:
        type: integer
      value:
        type: string
    required:
    - key
    - language
    - model
    - model_id
    - value
    type: object
  translation.TranslationResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      key:
        type: string
      language:
        type: string
      model:
        type: string
      model_id:
        type: integer
      updated_at:
        type: string
      value:
        type: string
    type: object
  translation.UpdateTranslationRequest:
    properties:
      id:
        type: integer
      key:
        type: string
      language:
        type: string
      model:
        type: string
      model_id:
        type: integer
      value:
        type: string
    required:
    - id
    type: object
  types.DateTime:
    properties:
      time.Time:
        type: string
    type: object
  types.ErrorResponse:
    properties:
      details: {}
      error:
        type: string
      success:
        type: boolean
    type: object
  types.PaginatedResponse:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/types.Pagination'
    type: object
  types.Pagination:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  types.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  websocket.ErrorResponse:
    properties:
      error:
        type: string
    type: object
info:
  contact:
    email: info@example.com
    name: Base Team
    url: https://example.com
  description: This is the API documentation for Base
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://example.com/terms
  title: Base API
  version: 2.0.0
paths:
  /activities:
    get:
      consumes:
      - application/json
      description: Get a list of activities
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,user_id,entity_type,entity_id,action,description,metadata,ip_address,user_agent,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List activities
      tags:
      - App/Activity
    post:
      consumes:
      - application/json
      description: Create a new Activity with the input payload
      parameters:
      - description: Create Activity request
        in: body
        name: activities
        required: true
        schema:
          $ref: '#/definitions/models.CreateActivityRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.ActivityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Activity
      tags:
      - App/Activity
  /activities/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Activity by its id
      parameters:
      - description: Activity id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Activity
      tags:
      - App/Activity
    get:
      consumes:
      - application/json
      description: Get a Activity by its id
      parameters:
      - description: Activity id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ActivityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Activity
      tags:
      - App/Activity
    put:
      consumes:
      - application/json
      description: Update a Activity by its id
      parameters:
      - description: Activity id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Activity request
        in: body
        name: activities
        required: true
        schema:
          $ref: '#/definitions/models.UpdateActivityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ActivityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Activity
      tags:
      - App/Activity
  /activities/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all activities with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ActivitySelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all activities for select options
      tags:
      - App/Activity
  /activities/recent:
    get:
      consumes:
      - application/json
      description: Get the most recent activities
      parameters:
      - description: Number of activities to return (default 10)
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.ActivityResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get recent activities
      tags:
      - App/Activity
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request to reset password
      parameters:
      - description: Forgot Password Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Forgot Password
      tags:
      - Core/Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Core/Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - Core/Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/authentication.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register
      tags:
      - Core/Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using token
      parameters:
      - description: Reset Password Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reset Password
      tags:
      - Core/Auth
  /authorization/check:
    post:
      consumes:
      - application/json
      description: Checks if a user has permission to perform an action on a resource
      parameters:
      - description: Permission check request
        in: body
        name: checkRequest
        required: true
        schema:
          properties:
            action:
              type: string
            organization_id:
              type: string
            resource_id:
              type: string
            resource_type:
              type: string
            user_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Permission check result
          schema:
            properties:
              has_permission:
                type: boolean
            type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Check user permission
      tags:
      - Core/Authorization
  /authorization/permissions:
    get:
      consumes:
      - application/json
      description: Get all permissions in the system
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/authorization.Permission'
                type: array
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all permissions
      tags:
      - Core/Authorization
  /authorization/resource-permissions:
    post:
      consumes:
      - application/json
      description: Creates a resource-specific permission override
      parameters:
      - description: Resource permission to create
        in: body
        name: resourcePermission
        required: true
        schema:
          $ref: '#/definitions/authorization.ResourcePermission'
      produces:
      - application/json
      responses:
        "201":
          description: Resource permission created successfully
          schema:
            properties:
              data:
                $ref: '#/definitions/authorization.ResourcePermission'
            type: object
        "400":
          description: Invalid resource permission data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Create resource permission
      tags:
      - Core/Authorization
  /authorization/resource-permissions/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a resource-specific permission override
      parameters:
      - description: Resource Permission Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Resource permission deleted successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Delete resource permission
      tags:
      - Core/Authorization
  /authorization/roles:
    get:
      consumes:
      - application/json
      description: Get all roles in the system
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/authorization.Role'
                type: array
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all roles
      tags:
      - Core/Authorization
    post:
      consumes:
      - application/json
      description: Creates a new role with the provided information
      parameters:
      - description: Role object to be created
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/authorization.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            properties:
              data:
                $ref: '#/definitions/authorization.Role'
            type: object
        "400":
          description: Invalid role data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Create a new role
      tags:
      - Core/Authorization
  /authorization/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a role by its Id
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "403":
          description: System role cannot be deleted
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Delete a role
      tags:
      - Core/Authorization
    get:
      consumes:
      - application/json
      description: Retrieves a specific role by its Id
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                $ref: '#/definitions/authorization.Role'
            type: object
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get role by Id
      tags:
      - Core/Authorization
    put:
      consumes:
      - application/json
      description: Updates an existing role with the provided information
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: Updated role object
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/authorization.Role'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            properties:
              data:
                $ref: '#/definitions/authorization.Role'
            type: object
        "400":
          description: Invalid role data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: System role cannot be modified
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update a role
      tags:
      - Core/Authorization
  /authorization/roles/{id}/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all permissions associated with a specific role
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/authorization.Permission'
                type: array
            type: object
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get permissions for a role
      tags:
      - Core/Authorization
    post:
      consumes:
      - application/json
      description: Assigns a permission to a role
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: Permission Id to assign
        in: body
        name: assignRequest
        required: true
        schema:
          properties:
            permission_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Permission assigned successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Role or permission not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: Permission already assigned
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Assign permission to role
      tags:
      - Core/Authorization
    put:
      consumes:
      - application/json
      description: Replaces all permissions for a role with the provided list
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: List of permission IDs to assign
        in: body
        name: permissions
        required: true
        schema:
          properties:
            permission_ids:
              items:
                type: integer
              type: array
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Permissions updated successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update all permissions for a role
      tags:
      - Core/Authorization
  /authorization/roles/{id}/permissions/{permissionId}:
    delete:
      consumes:
      - application/json
      description: Removes a permission from a role
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: Permission Id
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permission revoked successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "404":
          description: Role or permission not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Revoke permission from role
      tags:
      - Core/Authorization
  /authorization/user/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all permissions for the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/authorization.Permission'
                type: array
            type: object
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get current user permissions
      tags:
      - Core/Authorization
  /employees:
    get:
      consumes:
      - application/json
      description: Get a list of employees
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,first_name,last_name,username,phone,email,role_id,password,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List employees
      tags:
      - App/Employee
    post:
      consumes:
      - application/json
      description: Create a new Employee with the input payload
      parameters:
      - description: Create Employee request
        in: body
        name: employees
        required: true
        schema:
          $ref: '#/definitions/models.CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Employee
      tags:
      - App/Employee
  /employees/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Employee by its id
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Employee
      tags:
      - App/Employee
    get:
      consumes:
      - application/json
      description: Get a Employee by its id
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Employee
      tags:
      - App/Employee
    put:
      consumes:
      - application/json
      description: Update a Employee by its id
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Employee request
        in: body
        name: employees
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Employee
      tags:
      - App/Employee
  /employees/{id}/password:
    put:
      consumes:
      - application/json
      description: Change the password for a specific employee
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/employees.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Change employee password
      tags:
      - App/Employee
  /employees/{id}/tasks:
    get:
      consumes:
      - application/json
      description: Get all tasks assigned to a specific employee
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items: {}
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get tasks assigned to an employee
      tags:
      - App/Employee
  /employees/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all employees with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EmployeeSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all employees for select options
      tags:
      - App/Employee
  /media:
    get:
      description: Get a paginated list of media items
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List media items
      tags:
      - Core/Media
    post:
      consumes:
      - multipart/form-data
      description: Create a new media item with optional file upload
      parameters:
      - description: Media name
        in: formData
        name: name
        required: true
        type: string
      - description: Media type
        in: formData
        name: type
        required: true
        type: string
      - description: Media description
        in: formData
        name: description
        type: string
      - description: Media file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new media item
      tags:
      - Core/Media
  /media/{id}:
    delete:
      description: Delete a media item and its associated file
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a media item
      tags:
      - Core/Media
    get:
      description: Get a media item by Id
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a media item
      tags:
      - Core/Media
    put:
      consumes:
      - multipart/form-data
      description: Update a media item's details and optionally its file
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      - description: Media name
        in: formData
        name: name
        type: string
      - description: Media type
        in: formData
        name: type
        type: string
      - description: Media description
        in: formData
        name: description
        type: string
      - description: Media file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a media item
      tags:
      - Core/Media
  /media/{id}/file:
    delete:
      description: Remove the file attached to a media item
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Remove media file
      tags:
      - Core/Media
    put:
      consumes:
      - multipart/form-data
      description: Update the file attached to a media item
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      - description: Media file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update media file
      tags:
      - Core/Media
  /media/all:
    get:
      description: Get an unpaginated list of all media items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/media.MediaListResponse'
            type: array
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all media items
      tags:
      - Core/Media
  /notifications:
    get:
      consumes:
      - application/json
      description: Get a list of notifications
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,user_id,title,body,type,read,read_at,action_url,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List notifications
      tags:
      - App/Notification
    post:
      consumes:
      - application/json
      description: Create a new Notification with the input payload
      parameters:
      - description: Create Notification request
        in: body
        name: notifications
        required: true
        schema:
          $ref: '#/definitions/models.CreateNotificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Notification
      tags:
      - App/Notification
  /notifications/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Notification by its id
      parameters:
      - description: Notification id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Notification
      tags:
      - App/Notification
    get:
      consumes:
      - application/json
      description: Get a Notification by its id
      parameters:
      - description: Notification id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Notification
      tags:
      - App/Notification
    put:
      consumes:
      - application/json
      description: Update a Notification by its id
      parameters:
      - description: Notification id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Notification request
        in: body
        name: notifications
        required: true
        schema:
          $ref: '#/definitions/models.UpdateNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Notification
      tags:
      - App/Notification
  /notifications/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all notifications with id and name only
        (for dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NotificationSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all notifications for select options
      tags:
      - App/Notification
  /oauth/apple/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Apple
      parameters:
      - description: Apple Id Token
        in: body
        name: idToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Apple OAuth callback
      tags:
      - Core/OAuth
  /oauth/facebook/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Facebook
      parameters:
      - description: Facebook Access Token
        in: body
        name: accessToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Facebook OAuth callback
      tags:
      - Core/OAuth
  /oauth/google/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Google
      parameters:
      - description: Google Id Token
        in: body
        name: idToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Google OAuth callback
      tags:
      - Core/OAuth
  /profile:
    get:
      consumes:
      - application/json
      description: Get profile by Bearer Token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get profile from Authenticated User Token
      tags:
      - Core/Profile
    put:
      consumes:
      - application/json
      description: Update profile by Bearer Token
      parameters:
      - description: Update Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/profile.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update profile from Authenticated User Token
      tags:
      - Core/Profile
  /profile/avatar:
    put:
      consumes:
      - multipart/form-data
      description: Update profile avatar by Bearer Token
      parameters:
      - description: Avatar file
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update profile avatar from Authenticated User Token
      tags:
      - Core/Profile
  /profile/password:
    put:
      consumes:
      - application/json
      description: Update profile password by Bearer Token
      parameters:
      - description: Update Password Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/profile.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update profile password from Authenticated User Token
      tags:
      - Core/Profile
  /scheduler/stats:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get scheduler statistics
      tags:
      - Core/Scheduler
  /scheduler/tasks:
    get:
      description: Returns a list of all registered tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all registered tasks
      tags:
      - Core/Scheduler
  /scheduler/tasks/{name}:
    get:
      parameters:
      - description: Task name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get a specific task
      tags:
      - Core/Scheduler
  /scheduler/tasks/{name}/disable:
    put:
      parameters:
      - description: Task name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Disable a specific task
      tags:
      - Core/Scheduler
  /scheduler/tasks/{name}/enable:
    put:
      parameters:
      - description: Task name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Enable a specific task
      tags:
      - Core/Scheduler
  /scheduler/tasks/{name}/run:
    post:
      parameters:
      - description: Task name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Run a specific task immediately
      tags:
      - Core/Scheduler
  /search:
    get:
      consumes:
      - application/json
      description: Search across multiple modules (customers, employees, business_customers,
        etc.)
      parameters:
      - description: Search query (minimum 2 characters)
        example: '"john"'
        in: query
        name: q
        required: true
        type: string
      - description: Comma-separated modules to search
        example: '"customer,employee,business_customer"'
        in: query
        name: modules
        type: string
      - description: 'Results per module (default: 10)'
        example: 20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Global search across modules
      tags:
      - Global/Search
  /settings:
    get:
      consumes:
      - application/json
      description: Get a list of settings
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,setting_key,label,group,type,value_string,value_int,value_float,value_bool,description,is_public,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List settings
      tags:
      - App/Settings
    post:
      consumes:
      - application/json
      description: Create a new Settings with the input payload
      parameters:
      - description: Create Settings request
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/models.CreateSettingsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Settings
      tags:
      - App/Settings
  /settings/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Settings by its id
      parameters:
      - description: Settings id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Settings
      tags:
      - App/Settings
    get:
      consumes:
      - application/json
      description: Get a Settings by its id
      parameters:
      - description: Settings id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Settings
      tags:
      - App/Settings
    put:
      consumes:
      - application/json
      description: Update a Settings by its id
      parameters:
      - description: Settings id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Settings request
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Settings
      tags:
      - App/Settings
  /settings/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all settings with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SettingsSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all settings for select options
      tags:
      - App/Settings
  /translations:
    get:
      description: Get a paginated list of translations with optional filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Filter by model name
        in: query
        name: model
        type: string
      - description: Filter by model ID
        in: query
        name: model_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List translations
      tags:
      - Core/Translations
    post:
      consumes:
      - application/json
      description: Create a new translation
      parameters:
      - description: Translation data
        in: body
        name: translation
        required: true
        schema:
          $ref: '#/definitions/translation.CreateTranslationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/translation.TranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create translation
      tags:
      - Core/Translations
  /translations/bulk:
    post:
      consumes:
      - application/json
      description: Update multiple translations for a model at once
      parameters:
      - description: Bulk translation data
        in: body
        name: bulk
        required: true
        schema:
          $ref: '#/definitions/translation.BulkTranslationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Bulk update translations
      tags:
      - Core/Translations
  /translations/by-id/{id}:
    delete:
      description: Delete a translation by ID
      parameters:
      - description: Translation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete translation
      tags:
      - Core/Translations
    get:
      description: Get a single translation by its ID
      parameters:
      - description: Translation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/translation.TranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get translation by ID
      tags:
      - Core/Translations
    put:
      consumes:
      - application/json
      description: Update an existing translation
      parameters:
      - description: Translation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Translation data
        in: body
        name: translation
        required: true
        schema:
          $ref: '#/definitions/translation.UpdateTranslationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/translation.TranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update translation
      tags:
      - Core/Translations
  /translations/languages:
    get:
      description: Get a list of all languages that have translations in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get supported languages
      tags:
      - Core/Translations
  /translations/models/{model}/{model_id}:
    get:
      description: Get all translations for a specific model and model ID
      parameters:
      - description: Model name
        in: path
        name: model
        required: true
        type: string
      - description: Model ID
        in: path
        name: model_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get translations for model
      tags:
      - Core/Translations
  /translations/models/{model}/{model_id}/{language}:
    get:
      description: Get translations for a specific model, model ID, and language
      parameters:
      - description: Model name
        in: path
        name: model
        required: true
        type: string
      - description: Model ID
        in: path
        name: model_id
        required: true
        type: integer
      - description: Language code
        in: path
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/translation.TranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get translations for model and language
      tags:
      - Core/Translations
  /ws:
    get:
      consumes:
      - application/json
      description: 'Establishes a WebSocket connection, check example at: /static/chat.html'
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      - description: User Nickname
        in: query
        name: nickname
        type: string
      - description: Chat Room
        in: query
        name: room
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/websocket.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Connect to WebSocket
      tags:
      - Core/Websocket
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: API Key for authentication
    in: header
    name: X-Api-Key
    type: apiKey
  BearerAuth:
    description: Enter your token with the prefix "Bearer "
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
