basePath: /api
consumes:
- application/json
definitions:
  authentication.AuthResponse:
    properties:
      accessToken:
        type: string
      avatar_url:
        type: string
      email:
        type: string
      exp:
        type: integer
      extend: {}
      first_name:
        type: string
      id:
        type: integer
      last_login:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      role_name:
        type: string
      username:
        type: string
    type: object
  authentication.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  authentication.ForgotPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
    required:
    - email
    type: object
  authentication.LoginRequest:
    description: Login request payload
    properties:
      email:
        example: john@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  authentication.RegisterRequest:
    description: Registration request payload
    properties:
      email:
        description: '@Description User''s email address'
        example: john@example.com
        type: string
      first_name:
        description: '@Description User''s first name'
        example: John
        type: string
      last_name:
        description: '@Description User''s last name'
        example: Doe
        type: string
      password:
        description: '@Description Password for the account (minimum 8 characters)'
        example: password123
        minLength: 8
        type: string
      phone:
        description: '@Description User''s phone number'
        example: "+1234567890"
        type: string
      username:
        description: '@Description Username for the account'
        example: johndoe
        type: string
    required:
    - email
    - password
    type: object
  authentication.ResetPasswordRequest:
    properties:
      email:
        example: john@example.com
        type: string
      new_password:
        example: newpassword123
        minLength: 6
        type: string
      token:
        type: string
    required:
    - email
    - new_password
    - token
    type: object
  authentication.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  authorization.Permission:
    properties:
      action:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      resource_type:
        type: string
      updated_at:
        type: string
    type: object
  authorization.ResourcePermission:
    properties:
      action:
        description: Action type (e.g., "create", "read", "update", "delete")
        type: string
      created_at:
        type: string
      default_scope:
        description: Default permission scope (e.g., "own", "team", "all")
        type: string
      id:
        type: integer
      permission_id:
        description: 'Optional: legacy permission Id'
        type: integer
      resource_id:
        description: 'Optional: specific resource Id if applicable'
        type: string
      resource_type:
        description: Resource type (e.g., "project", "employee", etc.)
        type: string
      role_id:
        description: 'Optional: role Id for role-based permissions'
        type: string
      updated_at:
        type: string
      user_id:
        description: 'Optional: specific user Id if applicable'
        type: integer
    type: object
  authorization.Role:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      is_system:
        type: boolean
      name:
        type: string
      permission_count:
        description: New field
        type: integer
      updated_at:
        type: string
    type: object
  employees.ChangePasswordRequest:
    properties:
      CurrentPassword:
        type: string
      NewPassword:
        type: string
    required:
    - CurrentPassword
    - NewPassword
    type: object
  freeradius.CreateRADIUSUserRequest:
    properties:
      business_customer_id:
        type: integer
      customer_id:
        type: integer
      data_limit:
        type: integer
      download_speed:
        type: integer
      group_name:
        type: string
      idle_timeout:
        type: integer
      password:
        type: string
      service_plan:
        type: string
      session_timeout:
        type: integer
      simultaneous_use:
        type: integer
      upload_speed:
        type: integer
      username:
        type: string
    required:
    - password
    - username
    type: object
  freeradius.RADIUSSession:
    properties:
      acct_input_octets:
        description: bytes
        type: integer
      acct_input_packets:
        type: integer
      acct_output_octets:
        description: bytes
        type: integer
      acct_output_packets:
        type: integer
      acct_session_id:
        type: string
      acct_session_time:
        description: seconds
        type: integer
      acct_start_time:
        type: string
      acct_terminate_cause:
        type: string
      called_station_id:
        type: string
      calling_station_id:
        type: string
      created_at:
        type: string
      framed_ip_address:
        type: string
      id:
        type: integer
      nas_ip_address:
        type: string
      nas_port:
        type: integer
      session_id:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  freeradius.RADIUSUserResponse:
    properties:
      business_customer_id:
        type: integer
      created_at:
        type: string
      customer_id:
        type: integer
      data_limit:
        type: integer
      download_speed:
        type: integer
      group_name:
        type: string
      id:
        type: integer
      idle_timeout:
        type: integer
      last_login:
        type: string
      last_logout:
        type: string
      service_plan:
        type: string
      session_timeout:
        type: integer
      simultaneous_use:
        type: integer
      status:
        type: string
      updated_at:
        type: string
      upload_speed:
        type: integer
      username:
        type: string
    type: object
  freeradius.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  freeradius.UpdateRADIUSUserRequest:
    properties:
      data_limit:
        type: integer
      download_speed:
        type: integer
      group_name:
        type: string
      idle_timeout:
        type: integer
      password:
        type: string
      service_plan:
        type: string
      session_timeout:
        type: integer
      simultaneous_use:
        type: integer
      status:
        type: string
      upload_speed:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  media.MediaListResponse:
    properties:
      created_at:
        type: string
      description:
        type: string
      file:
        $ref: '#/definitions/storage.Attachment'
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  media.MediaResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      file:
        $ref: '#/definitions/storage.Attachment'
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.BusinessCustomer:
    properties:
      business_address:
        description: Business Address
        type: string
      city:
        type: string
      company_name:
        description: Business Information
        type: string
      contact_person:
        description: Contact Information
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      latitude:
        type: string
      longitude:
        type: string
      notes:
        description: Notes
        type: string
      orders:
        items:
          $ref: '#/definitions/models.Order'
        type: array
      phone:
        type: string
      plan:
        allOf:
        - $ref: '#/definitions/models.Plan'
        description: Relations
      plan_id:
        description: Current Plan
        type: integer
      postal_code:
        type: string
      service_end:
        type: string
      service_start:
        description: Service Periods
        type: string
      status:
        description: Account Status
        type: string
      tax_address:
        type: string
      uin:
        description: Unique Identification Number (Kosovo business registration)
        type: string
      updated_at:
        type: string
    type: object
  models.BusinessCustomerResponse:
    properties:
      business_address:
        type: string
      city:
        type: string
      company_name:
        type: string
      contact_person:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      latitude:
        type: string
      longitude:
        type: string
      notes:
        type: string
      phone:
        type: string
      plan:
        $ref: '#/definitions/models.Plan'
      plan_id:
        description: Plan Information
        type: integer
      postal_code:
        type: string
      service_end:
        type: string
      service_start:
        type: string
      status:
        type: string
      tax_address:
        type: string
      uin:
        type: string
      updated_at:
        type: string
    type: object
  models.BusinessCustomerSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.CreateBusinessCustomerRequest:
    properties:
      business_address:
        type: string
      city:
        type: string
      company_name:
        type: string
      contact_person:
        type: string
      email:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      notes:
        type: string
      phone:
        type: string
      postal_code:
        type: string
      status:
        type: string
      tax_address:
        type: string
      uin:
        type: string
    type: object
  models.CreateBusinessOrderRequest:
    properties:
      amount_cents:
        type: integer
      business_customer_id:
        type: integer
      due_date:
        type: string
      extend_months:
        description: Number of months for business orders
        type: integer
      order_type:
        type: string
      period_end:
        type: string
      period_start:
        type: string
      plan_id:
        type: integer
      status:
        type: string
    type: object
  models.CreateCustomerRequest:
    properties:
      address:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      notes:
        type: string
      phone:
        type: string
      status:
        type: string
    type: object
  models.CreateEmployeeRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      username:
        type: string
    type: object
  models.CreateGracePeriodRequest:
    properties:
      end_date:
        type: string
      extension_days:
        type: integer
      order_id:
        type: integer
      reason:
        type: string
      start_date:
        type: string
      status:
        type: string
    type: object
  models.CreateInvoiceRequest:
    properties:
      amount:
        type: integer
      due_date:
        type: string
      invoice_number:
        type: string
      issued_date:
        type: string
      order_id:
        type: integer
      pdf_path:
        type: string
      status:
        type: string
    type: object
  models.CreateNotificationRequest:
    properties:
      action_url:
        type: string
      customer_id:
        type: integer
      icon_name:
        type: string
      is_read:
        type: boolean
      message:
        type: string
      order_id:
        type: integer
      payment_id:
        type: integer
      priority:
        type: string
      read_at:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  models.CreateOrderRequest:
    properties:
      amount_cents:
        type: integer
      business_customer_id:
        type: integer
      customer_id:
        type: integer
      due_date:
        type: string
      extend_months:
        description: Number of months for business customer orders
        type: integer
      grace_debt:
        type: integer
      order_type:
        type: string
      period_end:
        type: string
      period_start:
        type: string
      plan_id:
        type: integer
      status:
        type: string
    type: object
  models.CreatePaymentRequest:
    properties:
      amount:
        type: integer
      method:
        type: string
      order_id:
        type: integer
      processed_at:
        type: string
      reference_number:
        type: string
      status:
        type: string
      transaction_id:
        type: string
    type: object
  models.CreatePlanRequest:
    properties:
      description:
        type: string
      duration_months:
        type: integer
      name:
        type: string
      price_cents:
        type: integer
      speed_down_mbps:
        type: integer
      speed_up_mbps:
        type: integer
      status:
        type: string
    type: object
  models.CreateResidentialOrderRequest:
    properties:
      amount_cents:
        type: integer
      customer_id:
        type: integer
      due_date:
        type: string
      order_type:
        type: string
      period_end:
        type: string
      period_start:
        type: string
      plan_id:
        type: integer
      status:
        type: string
    type: object
  models.CreateSettingsRequest:
    properties:
      description:
        type: string
      group:
        type: string
      is_public:
        type: boolean
      label:
        type: string
      setting_key:
        type: string
      type:
        type: string
      value_bool:
        type: boolean
      value_float:
        type: number
      value_int:
        type: integer
      value_string:
        type: string
    type: object
  models.CreateTagRequest:
    properties:
      color:
        type: string
      name:
        type: string
    type: object
  models.CreateTicketCommentRequest:
    properties:
      comment:
        type: string
      employee_id:
        type: integer
      ticket_id:
        type: integer
    type: object
  models.CreateTicketRequest:
    properties:
      assigned_to:
        type: integer
      business_customer_id:
        type: integer
      created_by:
        type: integer
      customer_id:
        type: integer
      description:
        type: string
      due_date:
        type: string
      escalated:
        type: boolean
      priority:
        type: string
      resolved_at:
        type: string
      status:
        type: string
      tags_ids:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  models.Customer:
    properties:
      address:
        type: string
      created_at:
        type: string
      customer_type:
        description: Customer Type - NEW for Order System
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      notes:
        description: Notes
        type: string
      orders:
        items:
          $ref: '#/definitions/models.Order'
        type: array
      phone:
        type: string
      plan:
        allOf:
        - $ref: '#/definitions/models.Plan'
        description: Relations
      plan_id:
        description: Current Plan
        type: integer
      service_end:
        type: string
      service_start:
        description: Service Periods - NEW for Order System
        type: string
      status:
        description: Account Status
        type: string
      updated_at:
        type: string
    type: object
  models.CustomerResponse:
    properties:
      address:
        type: string
      created_at:
        type: string
      customer_type:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      notes:
        type: string
      phone:
        type: string
      plan:
        $ref: '#/definitions/models.Plan'
      plan_id:
        description: Plan Information
        type: integer
      service_end:
        type: string
      service_start:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.CustomerSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.Employee:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/authorization.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.EmployeeModelResponse:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.EmployeeResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/authorization.Role'
      role_id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.EmployeeSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.ExtendServiceRequest:
    properties:
      customer_support:
        description: Whether this was requested by customer support
        type: boolean
      days:
        description: Number of days to extend (1-30)
        maximum: 30
        minimum: 1
        type: integer
      reason:
        description: 'Reason for extension: ''grace_period'' or ''extension'''
        type: string
    required:
    - days
    - reason
    type: object
  models.GracePeriodResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      end_date:
        $ref: '#/definitions/types.DateTime'
      extension_days:
        type: integer
      id:
        type: integer
      order_id:
        $ref: '#/definitions/models.OrderModelResponse'
      reason:
        type: string
      start_date:
        $ref: '#/definitions/types.DateTime'
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.GracePeriodSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.InvoiceResponse:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      due_date:
        $ref: '#/definitions/types.DateTime'
      id:
        type: integer
      invoice_number:
        type: string
      issued_date:
        $ref: '#/definitions/types.DateTime'
      order_id:
        $ref: '#/definitions/models.OrderModelResponse'
      pdf_path:
        type: string
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.InvoiceSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.NotificationResponse:
    properties:
      action_url:
        type: string
      created_at:
        type: string
      customer_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      icon_name:
        type: string
      id:
        type: integer
      is_read:
        type: boolean
      message:
        type: string
      order_id:
        type: integer
      payment_id:
        type: integer
      priority:
        type: string
      read_at:
        $ref: '#/definitions/types.DateTime'
      title:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  models.NotificationSelectOption:
    properties:
      id:
        type: integer
      name:
        description: From Title field
        type: string
    type: object
  models.Order:
    properties:
      amount_cents:
        type: integer
      business_customer:
        $ref: '#/definitions/models.BusinessCustomer'
      business_customer_id:
        type: integer
      created_at:
        type: string
      customer:
        $ref: '#/definitions/models.Customer'
      customer_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      due_date:
        $ref: '#/definitions/types.DateTime'
      grace_debt:
        description: Days to deduct from this order due to previous grace periods
        type: integer
      id:
        type: integer
      order_type:
        type: string
      period_end:
        $ref: '#/definitions/types.DateTime'
      period_start:
        $ref: '#/definitions/types.DateTime'
      plan:
        $ref: '#/definitions/models.Plan'
      plan_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.OrderListResponse:
    properties:
      amount_cents:
        type: integer
      business_customer:
        $ref: '#/definitions/models.BusinessCustomer'
      business_customer_id:
        type: integer
      created_at:
        type: string
      customer:
        $ref: '#/definitions/models.Customer'
      customer_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      due_date:
        $ref: '#/definitions/types.DateTime'
      id:
        type: integer
      order_type:
        type: string
      period_end:
        $ref: '#/definitions/types.DateTime'
      period_start:
        $ref: '#/definitions/types.DateTime'
      plan:
        $ref: '#/definitions/models.Plan'
      plan_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.OrderModelResponse:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.OrderResponse:
    properties:
      amount_cents:
        type: integer
      business_customer:
        $ref: '#/definitions/models.BusinessCustomer'
      business_customer_id:
        type: integer
      created_at:
        type: string
      customer:
        $ref: '#/definitions/models.Customer'
      customer_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      due_date:
        $ref: '#/definitions/types.DateTime'
      grace_debt:
        type: integer
      id:
        type: integer
      order_type:
        type: string
      period_end:
        $ref: '#/definitions/types.DateTime'
      period_start:
        $ref: '#/definitions/types.DateTime'
      plan:
        $ref: '#/definitions/models.Plan'
      plan_id:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.OrderSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.PaymentResponse:
    properties:
      amount:
        type: integer
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      method:
        type: string
      order_id:
        $ref: '#/definitions/models.OrderModelResponse'
      processed_at:
        $ref: '#/definitions/types.DateTime'
      reference_number:
        type: string
      status:
        type: string
      transaction_id:
        type: string
      updated_at:
        type: string
    type: object
  models.PaymentSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.Plan:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      duration_months:
        type: integer
      id:
        type: integer
      name:
        type: string
      price_cents:
        type: integer
      speed_down_mbps:
        type: integer
      speed_up_mbps:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.PlanResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      duration_months:
        type: integer
      id:
        type: integer
      name:
        type: string
      price_cents:
        type: integer
      speed_down_mbps:
        type: integer
      speed_up_mbps:
        type: integer
      status:
        type: string
      updated_at:
        type: string
    type: object
  models.PlanSelectOption:
    properties:
      id:
        type: integer
      name:
        description: From Name field
        type: string
    type: object
  models.SearchResponse:
    properties:
      duration:
        description: Search duration
        type: string
      modules:
        description: Modules that were searched
        items:
          type: string
        type: array
      query:
        description: Original search query
        type: string
      results:
        additionalProperties:
          items:
            $ref: '#/definitions/models.SearchResult'
          type: array
        description: Results grouped by module
        type: object
      total:
        description: Total results across all modules
        type: integer
    type: object
  models.SearchResult:
    properties:
      description:
        type: string
      id:
        type: integer
      metadata: {}
      subtitle:
        type: string
      title:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  models.SettingsResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      group:
        type: string
      id:
        type: integer
      is_public:
        type: boolean
      label:
        type: string
      setting_key:
        type: string
      type:
        type: string
      updated_at:
        type: string
      value_bool:
        type: boolean
      value_float:
        type: number
      value_int:
        type: integer
      value_string:
        type: string
    type: object
  models.SettingsSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.Tag:
    properties:
      color:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.TagResponse:
    properties:
      color:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      name:
        type: string
      updated_at:
        type: string
    type: object
  models.TagSelectOption:
    properties:
      id:
        type: integer
      name:
        description: From Name field
        type: string
    type: object
  models.Ticket:
    properties:
      assigned_employee:
        $ref: '#/definitions/models.Employee'
      assigned_to:
        type: integer
      business_customer:
        $ref: '#/definitions/models.BusinessCustomer'
      business_customer_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: integer
      created_by_employee:
        $ref: '#/definitions/models.Employee'
      customer:
        allOf:
        - $ref: '#/definitions/models.Customer'
        description: Relationships
      customer_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      due_date:
        $ref: '#/definitions/types.DateTime'
      escalated:
        type: boolean
      id:
        type: integer
      priority:
        type: string
      resolved_at:
        $ref: '#/definitions/types.DateTime'
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      ticket_comments:
        items:
          $ref: '#/definitions/models.TicketComment'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.TicketComment:
    properties:
      comment:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      employee:
        $ref: '#/definitions/models.Employee'
      employee_id:
        type: integer
      id:
        type: integer
      ticket:
        $ref: '#/definitions/models.Ticket'
      ticket_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.TicketCommentResponse:
    properties:
      comment:
        type: string
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      employee:
        $ref: '#/definitions/models.EmployeeModelResponse'
      id:
        type: integer
      ticket:
        $ref: '#/definitions/models.TicketModelResponse'
      updated_at:
        type: string
    type: object
  models.TicketCommentSelectOption:
    properties:
      id:
        type: integer
      name:
        description: Display name
        type: string
    type: object
  models.TicketListResponse:
    properties:
      assigned_employee:
        $ref: '#/definitions/models.Employee'
      assigned_to:
        type: integer
      business_customer:
        $ref: '#/definitions/models.BusinessCustomer'
      business_customer_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: integer
      created_by_employee:
        $ref: '#/definitions/models.Employee'
      customer:
        allOf:
        - $ref: '#/definitions/models.Customer'
        description: Relationships for table display
      customer_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      due_date:
        $ref: '#/definitions/types.DateTime'
      escalated:
        type: boolean
      id:
        type: integer
      priority:
        type: string
      resolved_at:
        $ref: '#/definitions/types.DateTime'
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.TicketModelResponse:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  models.TicketResponse:
    properties:
      assigned_employee:
        $ref: '#/definitions/models.Employee'
      assigned_to:
        type: integer
      business_customer:
        $ref: '#/definitions/models.BusinessCustomer'
      business_customer_id:
        type: integer
      created_at:
        type: string
      created_by:
        type: integer
      created_by_employee:
        $ref: '#/definitions/models.Employee'
      customer:
        allOf:
        - $ref: '#/definitions/models.Customer'
        description: Relationships
      customer_id:
        type: integer
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      due_date:
        $ref: '#/definitions/types.DateTime'
      escalated:
        type: boolean
      id:
        type: integer
      priority:
        type: string
      resolved_at:
        $ref: '#/definitions/types.DateTime'
      status:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      ticket_comments:
        items:
          $ref: '#/definitions/models.TicketComment'
        type: array
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.TicketSelectOption:
    properties:
      id:
        type: integer
      name:
        description: From Title field
        type: string
    type: object
  models.UpdateBusinessCustomerRequest:
    properties:
      business_address:
        type: string
      city:
        type: string
      company_name:
        type: string
      contact_person:
        type: string
      email:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      notes:
        type: string
      phone:
        type: string
      plan_id:
        type: integer
      postal_code:
        type: string
      service_end:
        type: string
      service_start:
        type: string
      status:
        type: string
      tax_address:
        type: string
      uin:
        type: string
    type: object
  models.UpdateCustomerRequest:
    properties:
      address:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      notes:
        type: string
      phone:
        type: string
      plan_id:
        type: integer
      service_end:
        type: string
      service_start:
        type: string
      status:
        type: string
    type: object
  models.UpdateEmployeeRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      username:
        type: string
    type: object
  models.UpdateGracePeriodRequest:
    properties:
      end_date:
        type: string
      extension_days:
        type: integer
      order_id:
        type: integer
      reason:
        type: string
      start_date:
        type: string
      status:
        type: string
    type: object
  models.UpdateInvoiceRequest:
    properties:
      amount:
        type: integer
      due_date:
        type: string
      invoice_number:
        type: string
      issued_date:
        type: string
      order_id:
        type: integer
      pdf_path:
        type: string
      status:
        type: string
    type: object
  models.UpdateNotificationRequest:
    properties:
      action_url:
        type: string
      customer_id:
        type: integer
      icon_name:
        type: string
      is_read:
        type: boolean
      message:
        type: string
      order_id:
        type: integer
      payment_id:
        type: integer
      priority:
        type: string
      read_at:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  models.UpdateOrderRequest:
    properties:
      amount_cents:
        type: integer
      business_customer_id:
        type: integer
      customer_id:
        type: integer
      due_date:
        type: string
      grace_debt:
        type: integer
      order_type:
        type: string
      period_end:
        type: string
      period_start:
        type: string
      plan_id:
        type: integer
      status:
        type: string
    type: object
  models.UpdatePaymentRequest:
    properties:
      amount:
        type: integer
      method:
        type: string
      order_id:
        type: integer
      processed_at:
        type: string
      reference_number:
        type: string
      status:
        type: string
      transaction_id:
        type: string
    type: object
  models.UpdatePlanRequest:
    properties:
      description:
        type: string
      duration_months:
        type: integer
      name:
        type: string
      price_cents:
        type: integer
      speed_down_mbps:
        type: integer
      speed_up_mbps:
        type: integer
      status:
        type: string
    type: object
  models.UpdateSettingsRequest:
    properties:
      description:
        type: string
      group:
        type: string
      is_public:
        type: boolean
      label:
        type: string
      setting_key:
        type: string
      type:
        type: string
      value_bool:
        type: boolean
      value_float:
        type: number
      value_int:
        type: integer
      value_string:
        type: string
    type: object
  models.UpdateTagRequest:
    properties:
      color:
        type: string
      name:
        type: string
    type: object
  models.UpdateTicketCommentRequest:
    properties:
      comment:
        type: string
      employee_id:
        type: integer
      ticket_id:
        type: integer
    type: object
  models.UpdateTicketRequest:
    properties:
      assigned_to:
        type: integer
      business_customer_id:
        type: integer
      created_by:
        type: integer
      customer_id:
        type: integer
      description:
        type: string
      due_date:
        type: string
      escalated:
        type: boolean
      priority:
        type: string
      resolved_at:
        type: string
      status:
        type: string
      tags_ids:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  oauth.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  olt.CreateOLTDeviceRequest:
    properties:
      api_key:
        type: string
      api_password:
        type: string
      api_url:
        type: string
      api_username:
        type: string
      firmware_version:
        type: string
      ip_address:
        type: string
      location:
        type: string
      model:
        type: string
      name:
        type: string
      snmp_community:
        type: string
      snmp_port:
        type: integer
      snmp_version:
        description: v1, v2c, v3
        type: string
      type:
        description: smartolt, huawei, other
        type: string
    required:
    - ip_address
    - name
    - type
    type: object
  olt.CreateONTConnectionRequest:
    properties:
      business_customer_id:
        type: integer
      customer_id:
        type: integer
      distance_meters:
        type: integer
      olt_device_id:
        type: integer
      ont_id:
        type: integer
      ont_mac:
        type: string
      ont_serial:
        type: string
      pon_port:
        type: integer
      profile_name:
        type: string
      signal_level:
        type: number
    required:
    - olt_device_id
    - ont_id
    - pon_port
    type: object
  olt.CreateServiceProfileRequest:
    properties:
      burst_download_mbps:
        type: integer
      burst_enabled:
        type: boolean
      burst_upload_mbps:
        type: integer
      download_speed_mbps:
        type: integer
      name:
        type: string
      olt_profile_config:
        type: string
      plan_id:
        type: integer
      priority:
        type: integer
      upload_speed_mbps:
        type: integer
    required:
    - download_speed_mbps
    - name
    - upload_speed_mbps
    type: object
  olt.OLTDevice:
    properties:
      api_key:
        type: string
      api_password:
        type: string
      api_url:
        description: For HTTP API-based OLTs like SmartOLT
        type: string
      api_username:
        type: string
      created_at:
        type: string
      firmware_version:
        type: string
      id:
        type: integer
      ip_address:
        type: string
      last_seen:
        type: string
      location:
        type: string
      model:
        type: string
      name:
        type: string
      snmp_community:
        type: string
      snmp_port:
        type: integer
      snmp_version:
        description: v1, v2c, v3
        type: string
      status:
        description: online, offline, maintenance
        type: string
      type:
        description: smartolt, huawei, other
        type: string
      updated_at:
        type: string
    type: object
  olt.ONTConnection:
    properties:
      business_customer_id:
        type: integer
      created_at:
        type: string
      customer_id:
        type: integer
      distance_meters:
        type: integer
      id:
        type: integer
      last_seen:
        type: string
      olt_device:
        allOf:
        - $ref: '#/definitions/olt.OLTDevice'
        description: Relationships
      olt_device_id:
        type: integer
      ont_id:
        type: integer
      ont_mac:
        type: string
      ont_serial:
        type: string
      pon_port:
        type: integer
      profile_name:
        type: string
      provisioned_at:
        type: string
      signal_level:
        description: dBm
        type: number
      status:
        description: online, offline, disabled, error
        type: string
      updated_at:
        type: string
    type: object
  olt.ServiceProfile:
    properties:
      burst_download_mbps:
        type: integer
      burst_enabled:
        type: boolean
      burst_upload_mbps:
        type: integer
      created_at:
        type: string
      download_speed_mbps:
        type: integer
      id:
        type: integer
      name:
        type: string
      olt_profile_config:
        type: string
      plan_id:
        type: integer
      priority:
        type: integer
      updated_at:
        type: string
      upload_speed_mbps:
        type: integer
    type: object
  olt.UpdateOLTDeviceRequest:
    properties:
      api_key:
        type: string
      api_password:
        type: string
      api_url:
        type: string
      api_username:
        type: string
      firmware_version:
        type: string
      ip_address:
        type: string
      location:
        type: string
      model:
        type: string
      name:
        type: string
      snmp_community:
        type: string
      snmp_port:
        type: integer
      snmp_version:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  olt.UpdateONTConnectionRequest:
    properties:
      business_customer_id:
        type: integer
      customer_id:
        type: integer
      distance_meters:
        type: integer
      ont_id:
        type: integer
      ont_mac:
        type: string
      ont_serial:
        type: string
      pon_port:
        type: integer
      profile_name:
        type: string
      signal_level:
        type: number
      status:
        type: string
    type: object
  olt.UpdateServiceProfileRequest:
    properties:
      burst_download_mbps:
        type: integer
      burst_enabled:
        type: boolean
      burst_upload_mbps:
        type: integer
      download_speed_mbps:
        type: integer
      name:
        type: string
      olt_profile_config:
        type: string
      plan_id:
        type: integer
      priority:
        type: integer
      upload_speed_mbps:
        type: integer
    type: object
  profile.UpdatePasswordRequest:
    properties:
      NewPassword:
        maxLength: 255
        minLength: 6
        type: string
      OldPassword:
        maxLength: 255
        type: string
    required:
    - NewPassword
    - OldPassword
    type: object
  profile.UpdateRequest:
    properties:
      email:
        maxLength: 255
        type: string
      first_name:
        maxLength: 255
        type: string
      last_name:
        maxLength: 255
        type: string
      phone:
        maxLength: 255
        type: string
      username:
        maxLength: 255
        type: string
    type: object
  profile.User:
    properties:
      avatar:
        $ref: '#/definitions/storage.Attachment'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastLogin:
        type: string
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      role:
        $ref: '#/definitions/authorization.Role'
      roleId:
        type: integer
      updatedAt:
        type: string
      username:
        type: string
    type: object
  profile.UserResponse:
    properties:
      avatar_url:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_login:
        type: string
      last_name:
        type: string
      phone:
        type: string
      role_id:
        type: integer
      role_name:
        type: string
      username:
        type: string
    type: object
  storage.Attachment:
    properties:
      created_at:
        type: string
      field:
        type: string
      filename:
        type: string
      id:
        type: integer
      model_id:
        type: integer
      model_type:
        type: string
      path:
        type: string
      size:
        type: integer
      updated_at:
        type: string
      url:
        type: string
    type: object
  translation.BulkTranslationRequest:
    properties:
      language:
        type: string
      model:
        type: string
      model_id:
        type: integer
      translations:
        additionalProperties:
          type: string
        description: key -> value mapping
        type: object
    required:
    - language
    - model
    - model_id
    - translations
    type: object
  translation.CreateTranslationRequest:
    properties:
      key:
        type: string
      language:
        type: string
      model:
        type: string
      model_id:
        type: integer
      value:
        type: string
    required:
    - key
    - language
    - model
    - model_id
    - value
    type: object
  translation.TranslationResponse:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      key:
        type: string
      language:
        type: string
      model:
        type: string
      model_id:
        type: integer
      updated_at:
        type: string
      value:
        type: string
    type: object
  translation.UpdateTranslationRequest:
    properties:
      id:
        type: integer
      key:
        type: string
      language:
        type: string
      model:
        type: string
      model_id:
        type: integer
      value:
        type: string
    required:
    - id
    type: object
  types.DateTime:
    properties:
      time.Time:
        type: string
    type: object
  types.ErrorResponse:
    properties:
      details: {}
      error:
        type: string
      success:
        type: boolean
    type: object
  types.PaginatedResponse:
    properties:
      data: {}
      pagination:
        $ref: '#/definitions/types.Pagination'
    type: object
  types.Pagination:
    properties:
      page:
        type: integer
      page_size:
        type: integer
      total:
        type: integer
      total_pages:
        type: integer
    type: object
  types.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  websocket.ErrorResponse:
    properties:
      error:
        type: string
    type: object
info:
  contact:
    email: info@negenet.com
    name: Negenet Team
    url: https://negenet.com
  description: This is the API documentation for Negenet
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://negenet.com/terms
  title: Negenet API
  version: 2.0.0
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Request to reset password
      parameters:
      - description: Forgot Password Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Forgot Password
      tags:
      - Core/Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: Login Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Login
      tags:
      - Core/Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Logout
      tags:
      - Core/Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: Register Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/authentication.AuthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Register
      tags:
      - Core/Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset user password using token
      parameters:
      - description: Reset Password Request
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/authentication.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authentication.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/authentication.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Reset Password
      tags:
      - Core/Auth
  /authorization/check:
    post:
      consumes:
      - application/json
      description: Checks if a user has permission to perform an action on a resource
      parameters:
      - description: Permission check request
        in: body
        name: checkRequest
        required: true
        schema:
          properties:
            action:
              type: string
            organization_id:
              type: string
            resource_id:
              type: string
            resource_type:
              type: string
            user_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Permission check result
          schema:
            properties:
              has_permission:
                type: boolean
            type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Check user permission
      tags:
      - Core/Authorization
  /authorization/permissions:
    get:
      consumes:
      - application/json
      description: Get all permissions in the system
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/authorization.Permission'
                type: array
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all permissions
      tags:
      - Core/Authorization
  /authorization/resource-permissions:
    post:
      consumes:
      - application/json
      description: Creates a resource-specific permission override
      parameters:
      - description: Resource permission to create
        in: body
        name: resourcePermission
        required: true
        schema:
          $ref: '#/definitions/authorization.ResourcePermission'
      produces:
      - application/json
      responses:
        "201":
          description: Resource permission created successfully
          schema:
            properties:
              data:
                $ref: '#/definitions/authorization.ResourcePermission'
            type: object
        "400":
          description: Invalid resource permission data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Create resource permission
      tags:
      - Core/Authorization
  /authorization/resource-permissions/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a resource-specific permission override
      parameters:
      - description: Resource Permission Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Resource permission deleted successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Delete resource permission
      tags:
      - Core/Authorization
  /authorization/roles:
    get:
      consumes:
      - application/json
      description: Get all roles in the system
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/authorization.Role'
                type: array
            type: object
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all roles
      tags:
      - Core/Authorization
    post:
      consumes:
      - application/json
      description: Creates a new role with the provided information
      parameters:
      - description: Role object to be created
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/authorization.Role'
      produces:
      - application/json
      responses:
        "201":
          description: Role created successfully
          schema:
            properties:
              data:
                $ref: '#/definitions/authorization.Role'
            type: object
        "400":
          description: Invalid role data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Create a new role
      tags:
      - Core/Authorization
  /authorization/roles/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a role by its Id
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "403":
          description: System role cannot be deleted
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Delete a role
      tags:
      - Core/Authorization
    get:
      consumes:
      - application/json
      description: Retrieves a specific role by its Id
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                $ref: '#/definitions/authorization.Role'
            type: object
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get role by Id
      tags:
      - Core/Authorization
    put:
      consumes:
      - application/json
      description: Updates an existing role with the provided information
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: Updated role object
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/authorization.Role'
      produces:
      - application/json
      responses:
        "200":
          description: Role updated successfully
          schema:
            properties:
              data:
                $ref: '#/definitions/authorization.Role'
            type: object
        "400":
          description: Invalid role data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "403":
          description: System role cannot be modified
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update a role
      tags:
      - Core/Authorization
  /authorization/roles/{id}/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all permissions associated with a specific role
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/authorization.Permission'
                type: array
            type: object
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get permissions for a role
      tags:
      - Core/Authorization
    post:
      consumes:
      - application/json
      description: Assigns a permission to a role
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: Permission Id to assign
        in: body
        name: assignRequest
        required: true
        schema:
          properties:
            permission_id:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Permission assigned successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Role or permission not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "409":
          description: Permission already assigned
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Assign permission to role
      tags:
      - Core/Authorization
    put:
      consumes:
      - application/json
      description: Replaces all permissions for a role with the provided list
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: List of permission IDs to assign
        in: body
        name: permissions
        required: true
        schema:
          properties:
            permission_ids:
              items:
                type: integer
              type: array
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Permissions updated successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Update all permissions for a role
      tags:
      - Core/Authorization
  /authorization/roles/{id}/permissions/{permissionId}:
    delete:
      consumes:
      - application/json
      description: Removes a permission from a role
      parameters:
      - description: Role Id
        in: path
        name: id
        required: true
        type: string
      - description: Permission Id
        in: path
        name: permissionId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permission revoked successfully
          schema:
            properties:
              success:
                type: boolean
            type: object
        "404":
          description: Role or permission not found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Revoke permission from role
      tags:
      - Core/Authorization
  /authorization/user/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all permissions for the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            properties:
              data:
                items:
                  $ref: '#/definitions/authorization.Permission'
                type: array
            type: object
        "401":
          description: User not authenticated
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - BearerAuth: []
      - ApiKeyAuth: []
      summary: Get current user permissions
      tags:
      - Core/Authorization
  /business-customers:
    get:
      consumes:
      - application/json
      description: Get a list of business-customers
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List business-customers
      tags:
      - App/BusinessCustomer
    post:
      consumes:
      - application/json
      description: Create a new BusinessCustomer with the input payload
      parameters:
      - description: Create BusinessCustomer request
        in: body
        name: business-customers
        required: true
        schema:
          $ref: '#/definitions/models.CreateBusinessCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.BusinessCustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new BusinessCustomer
      tags:
      - App/BusinessCustomer
  /business-customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a BusinessCustomer by its id
      parameters:
      - description: BusinessCustomer id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a BusinessCustomer
      tags:
      - App/BusinessCustomer
    get:
      consumes:
      - application/json
      description: Get a BusinessCustomer by its id
      parameters:
      - description: BusinessCustomer id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BusinessCustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a BusinessCustomer
      tags:
      - App/BusinessCustomer
    put:
      consumes:
      - application/json
      description: Update a BusinessCustomer by its id
      parameters:
      - description: BusinessCustomer id
        in: path
        name: id
        required: true
        type: integer
      - description: Update BusinessCustomer request
        in: body
        name: business-customers
        required: true
        schema:
          $ref: '#/definitions/models.UpdateBusinessCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BusinessCustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a BusinessCustomer
      tags:
      - App/BusinessCustomer
  /business-customers/{id}/extend-service:
    post:
      consumes:
      - application/json
      description: Extend service period by creating a grace period (24-48h extension)
      parameters:
      - description: Business Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service extension request
        in: body
        name: extend-service
        required: true
        schema:
          $ref: '#/definitions/models.ExtendServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GracePeriodResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Extend business customer service period
      tags:
      - App/BusinessCustomer
  /business-customers/{id}/orders:
    get:
      consumes:
      - application/json
      description: Get all orders for a specific business customer
      parameters:
      - description: Business Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OrderListResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get business customer orders
      tags:
      - App/BusinessCustomer
  /business-customers/{id}/tickets:
    get:
      consumes:
      - application/json
      description: Get all tickets for a specific business customer
      parameters:
      - description: Business Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketListResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get all tickets for a specific business customer
      tags:
      - App/BusinessCustomer
  /business-customers/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all business-customers with id and name
        only (for dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.BusinessCustomerSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all business-customers for select options
      tags:
      - App/BusinessCustomer
  /customers:
    get:
      consumes:
      - application/json
      description: Get a list of customers
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,first_name,last_name,email,phone,address,status,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List customers
      tags:
      - App/Customer
    post:
      consumes:
      - application/json
      description: Create a new Customer with the input payload
      parameters:
      - description: Create Customer request
        in: body
        name: customers
        required: true
        schema:
          $ref: '#/definitions/models.CreateCustomerRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Customer
      tags:
      - App/Customer
  /customers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Customer by its id
      parameters:
      - description: Customer id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Customer
      tags:
      - App/Customer
    get:
      consumes:
      - application/json
      description: Get a Customer by its id
      parameters:
      - description: Customer id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Customer
      tags:
      - App/Customer
    put:
      consumes:
      - application/json
      description: Update a Customer by its id
      parameters:
      - description: Customer id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Customer request
        in: body
        name: customers
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCustomerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CustomerResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Customer
      tags:
      - App/Customer
  /customers/{id}/extend-service:
    post:
      consumes:
      - application/json
      description: Extend service period by creating a grace period (24-48h extension)
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service extension request
        in: body
        name: extend-service
        required: true
        schema:
          $ref: '#/definitions/models.ExtendServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GracePeriodResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Extend customer service period
      tags:
      - App/Customer
  /customers/{id}/orders:
    get:
      consumes:
      - application/json
      description: Get all orders for a specific customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OrderListResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get customer orders
      tags:
      - App/Customer
  /customers/{id}/tickets:
    get:
      consumes:
      - application/json
      description: Get all tickets for a specific customer
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketListResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get customer tickets
      tags:
      - App/Customer
  /customers/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all customers with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CustomerSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all customers for select options
      tags:
      - App/Customer
  /employees:
    get:
      consumes:
      - application/json
      description: Get a list of employees
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,first_name,last_name,username,phone,email,role_id,password,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List employees
      tags:
      - App/Employee
    post:
      consumes:
      - application/json
      description: Create a new Employee with the input payload
      parameters:
      - description: Create Employee request
        in: body
        name: employees
        required: true
        schema:
          $ref: '#/definitions/models.CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Employee
      tags:
      - App/Employee
  /employees/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Employee by its id
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Employee
      tags:
      - App/Employee
    get:
      consumes:
      - application/json
      description: Get a Employee by its id
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Employee
      tags:
      - App/Employee
    put:
      consumes:
      - application/json
      description: Update a Employee by its id
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Employee request
        in: body
        name: employees
        required: true
        schema:
          $ref: '#/definitions/models.UpdateEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.EmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Employee
      tags:
      - App/Employee
  /employees/{id}/password:
    put:
      consumes:
      - application/json
      description: Change the password for a specific employee
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/employees.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Change employee password
      tags:
      - App/Employee
  /employees/{id}/tickets:
    get:
      consumes:
      - application/json
      description: Get all tickets assigned to a specific employee
      parameters:
      - description: Employee id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketListResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get tickets assigned to an employee
      tags:
      - App/Employee
  /employees/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all employees with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.EmployeeSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all employees for select options
      tags:
      - App/Employee
  /grace-periods:
    get:
      consumes:
      - application/json
      description: Get a list of grace-periods
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,extension_days,start_date,end_date,reason,status,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List grace-periods
      tags:
      - App/GracePeriod
    post:
      consumes:
      - application/json
      description: Create a new GracePeriod with the input payload
      parameters:
      - description: Create GracePeriod request
        in: body
        name: grace-periods
        required: true
        schema:
          $ref: '#/definitions/models.CreateGracePeriodRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.GracePeriodResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new GracePeriod
      tags:
      - App/GracePeriod
  /grace-periods/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a GracePeriod by its id
      parameters:
      - description: GracePeriod id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a GracePeriod
      tags:
      - App/GracePeriod
    get:
      consumes:
      - application/json
      description: Get a GracePeriod by its id
      parameters:
      - description: GracePeriod id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GracePeriodResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a GracePeriod
      tags:
      - App/GracePeriod
    put:
      consumes:
      - application/json
      description: Update a GracePeriod by its id
      parameters:
      - description: GracePeriod id
        in: path
        name: id
        required: true
        type: integer
      - description: Update GracePeriod request
        in: body
        name: grace-periods
        required: true
        schema:
          $ref: '#/definitions/models.UpdateGracePeriodRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GracePeriodResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a GracePeriod
      tags:
      - App/GracePeriod
  /grace-periods/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all grace-periods with id and name only
        (for dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.GracePeriodSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all grace-periods for select options
      tags:
      - App/GracePeriod
  /invoices:
    get:
      consumes:
      - application/json
      description: Get a list of invoices
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,amount,status,due_date,issued_date,pdf_path,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List invoices
      tags:
      - App/Invoice
    post:
      consumes:
      - application/json
      description: Create a new Invoice with the input payload
      parameters:
      - description: Create Invoice request
        in: body
        name: invoices
        required: true
        schema:
          $ref: '#/definitions/models.CreateInvoiceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Invoice
      tags:
      - App/Invoice
  /invoices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Invoice by its id
      parameters:
      - description: Invoice id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Invoice
      tags:
      - App/Invoice
    get:
      consumes:
      - application/json
      description: Get a Invoice by its id
      parameters:
      - description: Invoice id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Invoice
      tags:
      - App/Invoice
    put:
      consumes:
      - application/json
      description: Update a Invoice by its id
      parameters:
      - description: Invoice id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Invoice request
        in: body
        name: invoices
        required: true
        schema:
          $ref: '#/definitions/models.UpdateInvoiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Invoice
      tags:
      - App/Invoice
  /invoices/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all invoices with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.InvoiceSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all invoices for select options
      tags:
      - App/Invoice
  /media:
    get:
      description: Get a paginated list of media items
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List media items
      tags:
      - Core/Media
    post:
      consumes:
      - multipart/form-data
      description: Create a new media item with optional file upload
      parameters:
      - description: Media name
        in: formData
        name: name
        required: true
        type: string
      - description: Media type
        in: formData
        name: type
        required: true
        type: string
      - description: Media description
        in: formData
        name: description
        type: string
      - description: Media file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new media item
      tags:
      - Core/Media
  /media/{id}:
    delete:
      description: Delete a media item and its associated file
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a media item
      tags:
      - Core/Media
    get:
      description: Get a media item by Id
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a media item
      tags:
      - Core/Media
    put:
      consumes:
      - multipart/form-data
      description: Update a media item's details and optionally its file
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      - description: Media name
        in: formData
        name: name
        type: string
      - description: Media type
        in: formData
        name: type
        type: string
      - description: Media description
        in: formData
        name: description
        type: string
      - description: Media file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a media item
      tags:
      - Core/Media
  /media/{id}/file:
    delete:
      description: Remove the file attached to a media item
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Remove media file
      tags:
      - Core/Media
    put:
      consumes:
      - multipart/form-data
      description: Update the file attached to a media item
      parameters:
      - description: Media Id
        in: path
        name: id
        required: true
        type: integer
      - description: Media file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/media.MediaResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update media file
      tags:
      - Core/Media
  /media/all:
    get:
      description: Get an unpaginated list of all media items
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/media.MediaListResponse'
            type: array
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all media items
      tags:
      - Core/Media
  /notifications:
    get:
      consumes:
      - application/json
      description: Get a list of notifications
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,title,message,type,priority,is_read,read_at,customer_id,order_id,payment_id,action_url,icon_name,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List notifications
      tags:
      - App/Notification
    post:
      consumes:
      - application/json
      description: Create a new Notification with the input payload
      parameters:
      - description: Create Notification request
        in: body
        name: notifications
        required: true
        schema:
          $ref: '#/definitions/models.CreateNotificationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.NotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Notification
      tags:
      - App/Notification
  /notifications/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Notification by its id
      parameters:
      - description: Notification id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Notification
      tags:
      - App/Notification
    get:
      consumes:
      - application/json
      description: Get a Notification by its id
      parameters:
      - description: Notification id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Notification
      tags:
      - App/Notification
    put:
      consumes:
      - application/json
      description: Update a Notification by its id
      parameters:
      - description: Notification id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Notification request
        in: body
        name: notifications
        required: true
        schema:
          $ref: '#/definitions/models.UpdateNotificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.NotificationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Notification
      tags:
      - App/Notification
  /notifications/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all notifications with id and name only
        (for dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.NotificationSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all notifications for select options
      tags:
      - App/Notification
  /oauth/apple/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Apple
      parameters:
      - description: Apple Id Token
        in: body
        name: idToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Apple OAuth callback
      tags:
      - Core/OAuth
  /oauth/facebook/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Facebook
      parameters:
      - description: Facebook Access Token
        in: body
        name: accessToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Facebook OAuth callback
      tags:
      - Core/OAuth
  /oauth/google/callback:
    post:
      consumes:
      - application/json
      description: Handle the OAuth callback from Google
      parameters:
      - description: Google Id Token
        in: body
        name: idToken
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/oauth.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Google OAuth callback
      tags:
      - Core/OAuth
  /olt/devices:
    get:
      consumes:
      - application/json
      description: List OLT devices with optional filtering
      parameters:
      - description: OLT device type
        in: query
        name: type
        type: string
      - description: OLT device status
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: List OLT devices with optional filtering
      tags:
      - OLT
    post:
      consumes:
      - application/json
      description: Create a new OLT device
      parameters:
      - description: OLT device
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/olt.CreateOLTDeviceRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/olt.OLTDevice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create a new OLT device
      tags:
      - OLT
  /olt/devices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an OLT device
      parameters:
      - description: OLT device ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Delete an OLT device
      tags:
      - OLT
    get:
      consumes:
      - application/json
      description: Get an OLT device by ID
      parameters:
      - description: OLT device ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/olt.OLTDevice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get an OLT device by ID
      tags:
      - OLT
    put:
      consumes:
      - application/json
      description: Update an OLT device
      parameters:
      - description: OLT device ID
        in: path
        name: id
        required: true
        type: integer
      - description: OLT device
        in: body
        name: device
        required: true
        schema:
          $ref: '#/definitions/olt.UpdateOLTDeviceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/olt.OLTDevice'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Update an OLT device
      tags:
      - OLT
  /olt/devices/{id}/metrics:
    get:
      consumes:
      - application/json
      description: Get monitoring metrics for an OLT device
      parameters:
      - description: OLT device ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get monitoring metrics for an OLT device
      tags:
      - OLT
  /olt/devices/{id}/sync:
    post:
      consumes:
      - application/json
      description: Sync configuration with the OLT device
      parameters:
      - description: OLT device ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Sync configuration with the OLT device
      tags:
      - OLT
  /olt/ont-connections:
    get:
      consumes:
      - application/json
      description: List ONT connections with optional filtering
      parameters:
      - description: OLT device ID
        in: query
        name: olt_device_id
        type: integer
      - description: Customer ID
        in: query
        name: customer_id
        type: integer
      - description: Business customer ID
        in: query
        name: business_customer_id
        type: integer
      - description: ONT connection status
        in: query
        name: status
        type: string
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: List ONT connections with optional filtering
      tags:
      - OLT
    post:
      consumes:
      - application/json
      description: Create a new ONT connection
      parameters:
      - description: ONT connection
        in: body
        name: ont_connection
        required: true
        schema:
          $ref: '#/definitions/olt.CreateONTConnectionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/olt.ONTConnection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create a new ONT connection
      tags:
      - OLT
  /olt/ont-connections/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an ONT connection
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Delete an ONT connection
      tags:
      - OLT
    get:
      consumes:
      - application/json
      description: Get an ONT connection by ID
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/olt.ONTConnection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get an ONT connection by ID
      tags:
      - OLT
    put:
      consumes:
      - application/json
      description: Update an ONT connection
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      - description: ONT connection
        in: body
        name: ont_connection
        required: true
        schema:
          $ref: '#/definitions/olt.UpdateONTConnectionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/olt.ONTConnection'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Update an ONT connection
      tags:
      - OLT
  /olt/ont-connections/{id}/apply-service-profile:
    post:
      consumes:
      - application/json
      description: Apply a service profile to an ONT
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service profile name
        in: body
        name: profile_name
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Apply a service profile to an ONT
      tags:
      - OLT
  /olt/ont-connections/{id}/deprovision:
    post:
      consumes:
      - application/json
      description: Deprovision an ONT from the OLT device
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Deprovision an ONT from the OLT device
      tags:
      - OLT
  /olt/ont-connections/{id}/disable:
    post:
      consumes:
      - application/json
      description: Disable an ONT
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Disable an ONT
      tags:
      - OLT
  /olt/ont-connections/{id}/enable:
    post:
      consumes:
      - application/json
      description: Enable an ONT
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Enable an ONT
      tags:
      - OLT
  /olt/ont-connections/{id}/metrics:
    get:
      consumes:
      - application/json
      description: Get monitoring metrics for an ONT
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              format: float64
              type: number
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get monitoring metrics for an ONT
      tags:
      - OLT
  /olt/ont-connections/{id}/provision:
    post:
      consumes:
      - application/json
      description: Provision an ONT on the OLT device
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Provision an ONT on the OLT device
      tags:
      - OLT
  /olt/ont-connections/{id}/reboot:
    post:
      consumes:
      - application/json
      description: Reboot an ONT
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Reboot an ONT
      tags:
      - OLT
  /olt/ont-connections/{id}/signal:
    get:
      consumes:
      - application/json
      description: Get the signal level of an ONT
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              format: float64
              type: number
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get the signal level of an ONT
      tags:
      - OLT
  /olt/ont-connections/{id}/status:
    get:
      consumes:
      - application/json
      description: Get the current status of an ONT
      parameters:
      - description: ONT connection ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get the current status of an ONT
      tags:
      - OLT
  /olt/service-profiles:
    get:
      consumes:
      - application/json
      description: List all service profiles
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: List all service profiles
      tags:
      - OLT
    post:
      consumes:
      - application/json
      description: Create a new service profile
      parameters:
      - description: Service profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/olt.CreateServiceProfileRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/olt.ServiceProfile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create a new service profile
      tags:
      - OLT
  /olt/service-profiles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a service profile
      parameters:
      - description: Service profile ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Delete a service profile
      tags:
      - OLT
    get:
      consumes:
      - application/json
      description: Get a service profile by ID
      parameters:
      - description: Service profile ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/olt.ServiceProfile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get a service profile by ID
      tags:
      - OLT
    put:
      consumes:
      - application/json
      description: Update a service profile
      parameters:
      - description: Service profile ID
        in: path
        name: id
        required: true
        type: integer
      - description: Service profile
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/olt.UpdateServiceProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/olt.ServiceProfile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Update a service profile
      tags:
      - OLT
  /orders:
    get:
      consumes:
      - application/json
      description: Get a list of orders
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,amount_cents,period_start,period_end,due_date,status,order_type,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List orders
      tags:
      - App/Order
    post:
      consumes:
      - application/json
      description: Create a new Order with the input payload
      parameters:
      - description: Create Order request
        in: body
        name: orders
        required: true
        schema:
          $ref: '#/definitions/models.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Order
      tags:
      - App/Order
  /orders/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Order by its id
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Order
      tags:
      - App/Order
    get:
      consumes:
      - application/json
      description: Get a Order by its id
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Order
      tags:
      - App/Order
    put:
      consumes:
      - application/json
      description: Update a Order by its id
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Order request
        in: body
        name: orders
        required: true
        schema:
          $ref: '#/definitions/models.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Order
      tags:
      - App/Order
  /orders/{id}/generate-invoice:
    post:
      consumes:
      - application/json
      description: Generate an invoice from an existing order
      parameters:
      - description: Order id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.InvoiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Generate invoice from order
      tags:
      - App/Order
  /orders/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all orders with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OrderSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all orders for select options
      tags:
      - App/Order
  /orders/business:
    post:
      consumes:
      - application/json
      description: Create a new order for business customers with postpaid billing,
        prorated initial billing, and monthly cycles
      parameters:
      - description: Create business order request
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateBusinessOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new business customer order
      tags:
      - App/Order
  /orders/residential:
    post:
      consumes:
      - application/json
      description: Create a new order for residential customers with prepaid billing
        and grace debt tracking
      parameters:
      - description: Create residential order request
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.CreateResidentialOrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new residential customer order
      tags:
      - App/Order
  /payments:
    get:
      consumes:
      - application/json
      description: Get a list of payments
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,amount,method,status,transaction_id,processed_at,reference_number,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List payments
      tags:
      - App/Payment
    post:
      consumes:
      - application/json
      description: Create a new Payment with the input payload
      parameters:
      - description: Create Payment request
        in: body
        name: payments
        required: true
        schema:
          $ref: '#/definitions/models.CreatePaymentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Payment
      tags:
      - App/Payment
  /payments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Payment by its id
      parameters:
      - description: Payment id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Payment
      tags:
      - App/Payment
    get:
      consumes:
      - application/json
      description: Get a Payment by its id
      parameters:
      - description: Payment id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Payment
      tags:
      - App/Payment
    put:
      consumes:
      - application/json
      description: Update a Payment by its id
      parameters:
      - description: Payment id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Payment request
        in: body
        name: payments
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePaymentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PaymentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Payment
      tags:
      - App/Payment
  /payments/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all payments with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PaymentSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all payments for select options
      tags:
      - App/Payment
  /plans:
    get:
      consumes:
      - application/json
      description: Get a list of plans
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,name,description,price_cents,speed_mbps,data_limit_gb,duration_days,status,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List plans
      tags:
      - App/Plan
    post:
      consumes:
      - application/json
      description: Create a new Plan with the input payload
      parameters:
      - description: Create Plan request
        in: body
        name: plans
        required: true
        schema:
          $ref: '#/definitions/models.CreatePlanRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Plan
      tags:
      - App/Plan
  /plans/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Plan by its id
      parameters:
      - description: Plan id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Plan
      tags:
      - App/Plan
    get:
      consumes:
      - application/json
      description: Get a Plan by its id
      parameters:
      - description: Plan id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Plan
      tags:
      - App/Plan
    put:
      consumes:
      - application/json
      description: Update a Plan by its id
      parameters:
      - description: Plan id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Plan request
        in: body
        name: plans
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePlanRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Plan
      tags:
      - App/Plan
  /plans/{id}/activate:
    post:
      consumes:
      - application/json
      description: Set plan status to active
      parameters:
      - description: Plan id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Activate a plan
      tags:
      - App/Plan
  /plans/{id}/deactivate:
    post:
      consumes:
      - application/json
      description: Set plan status to inactive
      parameters:
      - description: Plan id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PlanResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Deactivate a plan
      tags:
      - App/Plan
  /plans/active:
    get:
      consumes:
      - application/json
      description: Get all plans with active status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PlanResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get active plans
      tags:
      - App/Plan
  /plans/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all plans with id and name only (for dropdowns/select
        boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PlanSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all plans for select options
      tags:
      - App/Plan
  /profile:
    get:
      consumes:
      - application/json
      description: Get profile by Bearer Token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get profile from Authenticated User Token
      tags:
      - Core/Profile
    put:
      consumes:
      - application/json
      description: Update profile by Bearer Token
      parameters:
      - description: Update Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/profile.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update profile from Authenticated User Token
      tags:
      - Core/Profile
  /profile/avatar:
    put:
      consumes:
      - multipart/form-data
      description: Update profile avatar by Bearer Token
      parameters:
      - description: Avatar file
        in: formData
        name: avatar
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update profile avatar from Authenticated User Token
      tags:
      - Core/Profile
  /profile/password:
    put:
      consumes:
      - application/json
      description: Update profile password by Bearer Token
      parameters:
      - description: Update Password Request
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/profile.UpdatePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/profile.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update profile password from Authenticated User Token
      tags:
      - Core/Profile
  /radius/health:
    get:
      consumes:
      - application/json
      description: Check the health of the FreeRADIUS service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Check the health of the FreeRADIUS service
      tags:
      - FreeRADIUS
  /radius/sessions/{session_id}/disconnect:
    post:
      consumes:
      - application/json
      description: Disconnect an active RADIUS session
      parameters:
      - description: Session ID
        in: path
        name: session_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/freeradius.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Disconnect an active RADIUS session
      tags:
      - FreeRADIUS
  /radius/sessions/active:
    get:
      consumes:
      - application/json
      description: Get currently active RADIUS sessions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/freeradius.RADIUSSession'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get currently active RADIUS sessions
      tags:
      - FreeRADIUS
  /radius/sessions/user/{username}:
    get:
      consumes:
      - application/json
      description: Get all sessions for a specific user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/freeradius.RADIUSSession'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get all sessions for a specific user
      tags:
      - FreeRADIUS
  /radius/stats:
    get:
      consumes:
      - application/json
      description: Get FreeRADIUS database statistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get FreeRADIUS database statistics
      tags:
      - FreeRADIUS
  /radius/users:
    get:
      consumes:
      - application/json
      description: List all RADIUS users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/freeradius.RADIUSUserResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: List all RADIUS users
      tags:
      - FreeRADIUS
    post:
      consumes:
      - application/json
      description: Create a new RADIUS user
      parameters:
      - description: RADIUS user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/freeradius.CreateRADIUSUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/freeradius.RADIUSUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Create a new RADIUS user
      tags:
      - FreeRADIUS
  /radius/users/{username}:
    delete:
      consumes:
      - application/json
      description: Delete a RADIUS user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Delete a RADIUS user
      tags:
      - FreeRADIUS
    get:
      consumes:
      - application/json
      description: Get a RADIUS user by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/freeradius.RADIUSUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Get a RADIUS user by username
      tags:
      - FreeRADIUS
    put:
      consumes:
      - application/json
      description: Update a RADIUS user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      - description: RADIUS user updates
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/freeradius.UpdateRADIUSUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/freeradius.RADIUSUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Update a RADIUS user
      tags:
      - FreeRADIUS
  /radius/users/{username}/disable:
    post:
      consumes:
      - application/json
      description: Disable a RADIUS user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/freeradius.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Disable a RADIUS user
      tags:
      - FreeRADIUS
  /radius/users/{username}/enable:
    post:
      consumes:
      - application/json
      description: Enable a RADIUS user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/freeradius.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Enable a RADIUS user
      tags:
      - FreeRADIUS
  /radius/users/{username}/status:
    get:
      consumes:
      - application/json
      description: Check the status of a RADIUS user
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      summary: Check the status of a RADIUS user
      tags:
      - FreeRADIUS
  /scheduler/stats:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get scheduler statistics
      tags:
      - Core/Scheduler
  /scheduler/tasks:
    get:
      description: Returns a list of all registered tasks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              additionalProperties: true
              type: object
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all registered tasks
      tags:
      - Core/Scheduler
  /scheduler/tasks/{name}:
    get:
      parameters:
      - description: Task name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get a specific task
      tags:
      - Core/Scheduler
  /scheduler/tasks/{name}/disable:
    put:
      parameters:
      - description: Task name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Disable a specific task
      tags:
      - Core/Scheduler
  /scheduler/tasks/{name}/enable:
    put:
      parameters:
      - description: Task name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Enable a specific task
      tags:
      - Core/Scheduler
  /scheduler/tasks/{name}/run:
    post:
      parameters:
      - description: Task name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Run a specific task immediately
      tags:
      - Core/Scheduler
  /search:
    get:
      consumes:
      - application/json
      description: Search across multiple modules (customers, employees, business_customers,
        etc.)
      parameters:
      - description: Search query (minimum 2 characters)
        example: '"john"'
        in: query
        name: q
        required: true
        type: string
      - description: Comma-separated modules to search
        example: '"customer,employee,business_customer"'
        in: query
        name: modules
        type: string
      - description: 'Results per module (default: 10)'
        example: 20
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Global search across modules
      tags:
      - Global/Search
  /settings:
    get:
      consumes:
      - application/json
      description: Get a list of settings
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,setting_key,label,group,type,value_string,value_int,value_float,value_bool,description,is_public,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List settings
      tags:
      - App/Settings
    post:
      consumes:
      - application/json
      description: Create a new Settings with the input payload
      parameters:
      - description: Create Settings request
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/models.CreateSettingsRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Settings
      tags:
      - App/Settings
  /settings/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Settings by its id
      parameters:
      - description: Settings id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Settings
      tags:
      - App/Settings
    get:
      consumes:
      - application/json
      description: Get a Settings by its id
      parameters:
      - description: Settings id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Settings
      tags:
      - App/Settings
    put:
      consumes:
      - application/json
      description: Update a Settings by its id
      parameters:
      - description: Settings id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Settings request
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSettingsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SettingsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Settings
      tags:
      - App/Settings
  /settings/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all settings with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.SettingsSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all settings for select options
      tags:
      - App/Settings
  /tags:
    get:
      consumes:
      - application/json
      description: Get a list of tags
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,name,color,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      - description: Search in tag names
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List tags
      tags:
      - App/Tag
    post:
      consumes:
      - application/json
      description: Create a new Tag with the input payload
      parameters:
      - description: Create Tag request
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/models.CreateTagRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Tag
      tags:
      - App/Tag
  /tags/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Tag by its id
      parameters:
      - description: Tag id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Tag
      tags:
      - App/Tag
    get:
      consumes:
      - application/json
      description: Get a Tag by its id
      parameters:
      - description: Tag id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Tag
      tags:
      - App/Tag
    put:
      consumes:
      - application/json
      description: Update a Tag by its id
      parameters:
      - description: Tag id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Tag request
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTagRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TagResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Tag
      tags:
      - App/Tag
  /tags/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all tags with id and name only (for dropdowns/select
        boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TagSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all tags for select options
      tags:
      - App/Tag
  /ticket-comments:
    get:
      consumes:
      - application/json
      description: Get a list of ticket-comments
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,comment,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List ticket-comments
      tags:
      - App/TicketComment
    post:
      consumes:
      - application/json
      description: Create a new TicketComment with the input payload
      parameters:
      - description: Create TicketComment request
        in: body
        name: ticket-comments
        required: true
        schema:
          $ref: '#/definitions/models.CreateTicketCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TicketCommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new TicketComment
      tags:
      - App/TicketComment
  /ticket-comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a TicketComment by its id
      parameters:
      - description: TicketComment id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a TicketComment
      tags:
      - App/TicketComment
    get:
      consumes:
      - application/json
      description: Get a TicketComment by its id
      parameters:
      - description: TicketComment id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketCommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a TicketComment
      tags:
      - App/TicketComment
    put:
      consumes:
      - application/json
      description: Update a TicketComment by its id
      parameters:
      - description: TicketComment id
        in: path
        name: id
        required: true
        type: integer
      - description: Update TicketComment request
        in: body
        name: ticket-comments
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTicketCommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketCommentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a TicketComment
      tags:
      - App/TicketComment
  /ticket-comments/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all ticket-comments with id and name only
        (for dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketCommentSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all ticket-comments for select options
      tags:
      - App/TicketComment
  /tickets:
    get:
      consumes:
      - application/json
      description: Get a list of tickets
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Sort field (id, created_at, updated_at,title,description,priority,status,customer_id,assigned_to,created_by,due_date,resolved_at,escalated,)
        in: query
        name: sort
        type: string
      - description: Sort order (asc, desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List tickets
      tags:
      - App/Ticket
    post:
      consumes:
      - application/json
      description: Create a new Ticket with the input payload
      parameters:
      - description: Create Ticket request
        in: body
        name: tickets
        required: true
        schema:
          $ref: '#/definitions/models.CreateTicketRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Create a new Ticket
      tags:
      - App/Ticket
  /tickets/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a Ticket by its id
      parameters:
      - description: Ticket id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a Ticket
      tags:
      - App/Ticket
    get:
      consumes:
      - application/json
      description: Get a Ticket by its id
      parameters:
      - description: Ticket id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Get a Ticket
      tags:
      - App/Ticket
    put:
      consumes:
      - application/json
      description: Update a Ticket by its id
      parameters:
      - description: Ticket id
        in: path
        name: id
        required: true
        type: integer
      - description: Update Ticket request
        in: body
        name: tickets
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTicketRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.TicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update a Ticket
      tags:
      - App/Ticket
  /tickets/all:
    get:
      consumes:
      - application/json
      description: Get a simplified list of all tickets with id and name only (for
        dropdowns/select boxes)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.TicketSelectOption'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: List all tickets for select options
      tags:
      - App/Ticket
  /translations:
    get:
      description: Get a paginated list of translations with optional filtering
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      - description: Filter by model name
        in: query
        name: model
        type: string
      - description: Filter by model ID
        in: query
        name: model_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: List translations
      tags:
      - Core/Translations
    post:
      consumes:
      - application/json
      description: Create a new translation
      parameters:
      - description: Translation data
        in: body
        name: translation
        required: true
        schema:
          $ref: '#/definitions/translation.CreateTranslationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/translation.TranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Create translation
      tags:
      - Core/Translations
  /translations/bulk:
    post:
      consumes:
      - application/json
      description: Update multiple translations for a model at once
      parameters:
      - description: Bulk translation data
        in: body
        name: bulk
        required: true
        schema:
          $ref: '#/definitions/translation.BulkTranslationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Bulk update translations
      tags:
      - Core/Translations
  /translations/by-id/{id}:
    delete:
      description: Delete a translation by ID
      parameters:
      - description: Translation ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete translation
      tags:
      - Core/Translations
    get:
      description: Get a single translation by its ID
      parameters:
      - description: Translation ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/translation.TranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get translation by ID
      tags:
      - Core/Translations
    put:
      consumes:
      - application/json
      description: Update an existing translation
      parameters:
      - description: Translation ID
        in: path
        name: id
        required: true
        type: integer
      - description: Translation data
        in: body
        name: translation
        required: true
        schema:
          $ref: '#/definitions/translation.UpdateTranslationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/translation.TranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update translation
      tags:
      - Core/Translations
  /translations/languages:
    get:
      description: Get a list of all languages that have translations in the system
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get supported languages
      tags:
      - Core/Translations
  /translations/models/{model}/{model_id}:
    get:
      description: Get all translations for a specific model and model ID
      parameters:
      - description: Model name
        in: path
        name: model
        required: true
        type: string
      - description: Model ID
        in: path
        name: model_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get translations for model
      tags:
      - Core/Translations
  /translations/models/{model}/{model_id}/{language}:
    get:
      description: Get translations for a specific model, model ID, and language
      parameters:
      - description: Model name
        in: path
        name: model
        required: true
        type: string
      - description: Model ID
        in: path
        name: model_id
        required: true
        type: integer
      - description: Language code
        in: path
        name: language
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/translation.TranslationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/types.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/types.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get translations for model and language
      tags:
      - Core/Translations
  /ws:
    get:
      consumes:
      - application/json
      description: 'Establishes a WebSocket connection, check example at: /static/chat.html'
      parameters:
      - description: Client ID
        in: query
        name: id
        type: string
      - description: User Nickname
        in: query
        name: nickname
        type: string
      - description: Chat Room
        in: query
        name: room
        type: string
      produces:
      - application/json
      responses:
        "101":
          description: Switching Protocols
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/websocket.ErrorResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Connect to WebSocket
      tags:
      - Core/Websocket
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    description: API Key for authentication
    in: header
    name: X-Api-Key
    type: apiKey
  BearerAuth:
    description: Enter your token with the prefix "Bearer "
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
